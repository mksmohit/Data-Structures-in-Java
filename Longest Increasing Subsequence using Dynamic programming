//Longest increasing subsequence using Dynamic programming
import java.util.*;
class Solution 
{
    public static int lis(int arr[]) 
    {
        int n=arr.length;	
        int lis[] = new int[n]; 
        int i,j,max = 0; 
        for ( i = 0; i < n; i++ ) 
        {
            lis[i] = 1; 
        }
        for ( i = 1; i < n; i++ )
        {
            for ( j = 0; j < i; j++ )  
            {          
                if ( arr[i] > arr[j] && lis[i] < lis[j] + 1) 
                    lis[i] = lis[j] + 1; 
            }
        }
            for ( i = 0; i < n; i++ ) 
            {
                if ( max < lis[i] ) 
                    max = lis[i]; 
            }
        return max; 
    }	
}
public class Runner 
{
	public static void main(String[] args) 
  {
		Scanner s = new Scanner(System.in);
		int n = s.nextInt();
		int arr[] = new int[n];
		for(int i=0; i<n; i++){
			arr[i] = s.nextInt();
		}
		System.out.println(Solution.lis(arr));
	}
}
